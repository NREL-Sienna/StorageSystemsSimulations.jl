var documenterSearchIndex = {"docs":
[{"location":"tutorials/simulation_tutorial/#sim_tutorial","page":"Simulation Model","title":"Simulating operations with StorageSystemSimulations","text":"","category":"section"},{"location":"tutorials/simulation_tutorial/","page":"Simulation Model","title":"Simulation Model","text":"Originally Contributed by: Jose Daniel Lara","category":"page"},{"location":"tutorials/simulation_tutorial/#Introduction","page":"Simulation Model","title":"Introduction","text":"","category":"section"},{"location":"tutorials/simulation_tutorial/#Load-Packages","page":"Simulation Model","title":"Load Packages","text":"","category":"section"},{"location":"tutorials/simulation_tutorial/","page":"Simulation Model","title":"Simulation Model","text":"using PowerSystems\nusing PowerSimulations\nusing StorageSystemsSimulations\nusing PowerSystemCaseBuilder\nusing HiGHS # solver","category":"page"},{"location":"tutorials/simulation_tutorial/#Data","page":"Simulation Model","title":"Data","text":"","category":"section"},{"location":"tutorials/simulation_tutorial/","page":"Simulation Model","title":"Simulation Model","text":"note: Note\nPowerSystemCaseBuilder.jl is a helper library that makes it easier to reproduce examples in the documentation and tutorials. Normally you would pass your local files to create the system data instead of calling the function build_system. For more details visit PowerSystemCaseBuilder Documentation","category":"page"},{"location":"tutorials/simulation_tutorial/","page":"Simulation Model","title":"Simulation Model","text":"c_sys5_bat = build_system(\n    PSITestSystems,\n    \"c_sys5_bat_ems\";\n    add_single_time_series=true,\n    add_reserves=true,\n)\norcd = get_component(ReserveDemandCurve, c_sys5_bat, \"ORDC1\")\nset_available!(orcd, false)","category":"page"},{"location":"reference/public/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"reference/public/#Formulations","page":"Public API","title":"Formulations","text":"","category":"section"},{"location":"reference/public/#StorageSystemsSimulations.StorageDispatchWithReserves","page":"Public API","title":"StorageSystemsSimulations.StorageDispatchWithReserves","text":"Formulation type to add storage formulation than can provide ancillary services. If a storage unit does not contribute to any service, then the variables and constraints related to services are ignored.\n\nThe formulation supports the following attributes. See Documentation for more details.\n\nDeviceModel(\n    StorageType, # E.g. EnergyReservoirStorage or GenericStorage\n    StorageDispatchWithReserves;\n    attributes=Dict(\n        \"reservation\" => true,\n        \"cycling_limits\" => false,\n        \"energy_target\" => false,\n        \"complete_coverage\" => false,\n        \"regularization\" => true,\n    ),\n    use_slacks=false,\n)\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#vars","page":"Public API","title":"Variables","text":"","category":"section"},{"location":"reference/public/#StorageSystemsSimulations.AncillaryServiceVariableDischarge","page":"Public API","title":"StorageSystemsSimulations.AncillaryServiceVariableDischarge","text":"Ancillary service fraction assigned to Storage Discharging to product p\n\nDocs abbreviation: sb^std_pt\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.AncillaryServiceVariableCharge","page":"Public API","title":"StorageSystemsSimulations.AncillaryServiceVariableCharge","text":"Ancillary service fraction assigned to Storage Charging to product p\n\nDocs abbreviation: sb^stc_pt\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageEnergyShortageVariable","page":"Public API","title":"StorageSystemsSimulations.StorageEnergyShortageVariable","text":"Slack variable for energy storage levels < target storage levels\n\nDocs abbreviation: e^st-\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageEnergySurplusVariable","page":"Public API","title":"StorageSystemsSimulations.StorageEnergySurplusVariable","text":"Slack variable for energy storage levels > target storage levels\n\nDocs abbreviation: e^st+\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageChargeCyclingSlackVariable","page":"Public API","title":"StorageSystemsSimulations.StorageChargeCyclingSlackVariable","text":"Slack variable for the cycling limits to allow for more charging usage than the allowed limited\n\nDocs nomenclature: c^ch-\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageDischargeCyclingSlackVariable","page":"Public API","title":"StorageSystemsSimulations.StorageDischargeCyclingSlackVariable","text":"Slack variable for the cycling limits to allow for more discharging usage than the allowed limited\n\nDocs nomenclature: c^ds-\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageRegularizationVariableCharge","page":"Public API","title":"StorageSystemsSimulations.StorageRegularizationVariableCharge","text":"Slack variable for energy storage levels > target storage levels\n\nDocs nomenclature: z^st ch\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageRegularizationVariableDischarge","page":"Public API","title":"StorageSystemsSimulations.StorageRegularizationVariableDischarge","text":"Slack variable for energy storage levels > target storage levels\n\nDocs abbreviation: z^st ds\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#aux_vars","page":"Public API","title":"Auxiliary Variables","text":"","category":"section"},{"location":"reference/public/#StorageSystemsSimulations.StorageEnergyOutput","page":"Public API","title":"StorageSystemsSimulations.StorageEnergyOutput","text":"Auxiliary Variable for Storage Models that solve for total energy output\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#cons","page":"Public API","title":"Constraints","text":"","category":"section"},{"location":"reference/public/#StorageSystemsSimulations.StateofChargeLimitsConstraint","page":"Public API","title":"StorageSystemsSimulations.StateofChargeLimitsConstraint","text":"Struct to create the state of charge constraint limits.\n\nThe specified constraint is formulated as:\n\nE_st^min le e^st_t le E_st^max quad forall t in 1dots T\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageCyclingCharge","page":"Public API","title":"StorageSystemsSimulations.StorageCyclingCharge","text":"Struct to create the storage cycling limits for the charge variable. Used when cycling_limits = true.\n\nThe specified constraint is formulated as:\n\nsum_t in mathcalT left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t right)eta^ch_st Delta t - c^ch- leq C_st E^max_st\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageCyclingDischarge","page":"Public API","title":"StorageSystemsSimulations.StorageCyclingDischarge","text":"Struct to create the storage cycling limits for the discharge variable. Used when cycling_limits = true.\n\nThe specified constraint is formulated as:\n\nsum_t in mathcalT left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_tright)frac1eta^ds_st Delta t - c^ds- leq C_st E^max_st\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.ReserveCoverageConstraint","page":"Public API","title":"StorageSystemsSimulations.ReserveCoverageConstraint","text":"Struct to specify the individual product ancillary service coverage at the beginning of the period for charge and discharge variables.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n sb_stcp1  eta^ch_st N_p Delta t le E_st^max - e^st_0 quad forall p in mathcalP^as_dn \n sb_stcpt  eta^ch_st N_p Delta t le E_st^max - e^st_t-1 quad forall p in mathcalP^as_dn  forall t in 2dots T \n sb_stdp1  frac1eta^ds_st N_p Delta t leq e^st_0 - E^min_st quad forall p in mathcalP^as_up \n sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t-1 - E^min_st quad forall p in mathcalP^as_up  forall t in 2dots T \nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.ReserveCoverageConstraintEndOfPeriod","page":"Public API","title":"StorageSystemsSimulations.ReserveCoverageConstraintEndOfPeriod","text":"Struct to specify the individual product ancillary service coverage at the end of the period for charge and discharge variables.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n sb_stcpt  eta^ch_st N_p Delta t le E_st^max - e^st_t quad forall p in mathcalP^as_dn forall t in 1dots T \n sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t- E^min_st quad forall p in mathcalP^as_up forall t in 1dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.ReserveCompleteCoverageConstraint","page":"Public API","title":"StorageSystemsSimulations.ReserveCompleteCoverageConstraint","text":"Struct to specify all products ancillary service coverage at the beginning of the period for charge and discharge variables. Used when the attribute complete_coverage = true.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n sum_p in mathcalP^textas_textdn sb_stcp1  eta^ch_st N_p Delta t le E_st^max - e^st_0 \n sum_p in mathcalP^textas_textdn  sb_stcpt eta^ch_st N_p Delta t le E_st^max - e^st_t-1 quad forall t in 2dots T \n sum_p in mathcalP^textas_textup sb_stdp1  frac1eta^ds_st N_p Delta t leq e^st_0 - E^min_st \n sum_p in mathcalP^textas_textup sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t-1- E^min_st quad forall t in 2dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.ReserveCompleteCoverageConstraintEndOfPeriod","page":"Public API","title":"StorageSystemsSimulations.ReserveCompleteCoverageConstraintEndOfPeriod","text":"Struct to specify all products ancillary service coverage at the end of the period for charge and discharge variables. Used when the attribute complete_coverage = true.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n sum_p in mathcalP^textas_textdn  sb_stcpt  eta^ch_st N_p Delta t le E_st^max - e^st_t quad forall t in 1dots T  \n sum_p in mathcalP^textas_textup sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t- E^min_st quad forall t in 1dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.StorageTotalReserveConstraint","page":"Public API","title":"StorageSystemsSimulations.StorageTotalReserveConstraint","text":"Struct to specify an auxiliary constraint for adding charge and discharge into a single active power reserve variable.\n\nThe specified constraint is formulated as:\n\nsb_stc p t + sb_std p t = r_pt quad forall p in mathcalP forall t in 1dots T\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.ReserveDischargeConstraint","page":"Public API","title":"StorageSystemsSimulations.ReserveDischargeConstraint","text":"Struct to specify the lower and upper bounds of the discharge variable considering reserves.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n p^st ds_t + sum_p in mathcalP^textas_textup sb_stdpt leq textss^st_tP^maxds_st quad forall t in 1dots T \n p^st ds_t - sum_p in mathcalP^\textas_textdn sb_stdpt geq 0 quad forall t in 1dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.ReserveChargeConstraint","page":"Public API","title":"StorageSystemsSimulations.ReserveChargeConstraint","text":"Struct to specify the lower and upper bounds of the charge variable considering reserves.\n\nThe specified constraints are formulated as:\n\nbeginalign*\np^st ch_t + sum_p in mathcalP^textas_textdn sb_stcpt leq (1 - textss^st_t)P^maxch_st quad forall t in 1dots T \n p^st ch_t - sum_p in mathcalP^textas_textup sb_stcpt geq 0 quad forall t in 1dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#params","page":"Public API","title":"Parameters","text":"","category":"section"},{"location":"reference/public/#StorageSystemsSimulations.EnergyLimitParameter","page":"Public API","title":"StorageSystemsSimulations.EnergyLimitParameter","text":"Parameter to define energy limit\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#ffs","page":"Public API","title":"FeedForwards","text":"","category":"section"},{"location":"reference/public/#StorageSystemsSimulations.EnergyTargetFeedforward","page":"Public API","title":"StorageSystemsSimulations.EnergyTargetFeedforward","text":"Adds a constraint to enforce a minimum energy level target with a slack variable associated witha penalty term.\n\n\n\n\n\n","category":"type"},{"location":"reference/public/#StorageSystemsSimulations.EnergyLimitFeedforward","page":"Public API","title":"StorageSystemsSimulations.EnergyLimitFeedforward","text":"Adds a constraint to limit the sum of a variable over the number of periods to the source value\n\n\n\n\n\n","category":"type"},{"location":"tutorials/single_stage_model/#op_problem_tutorial","page":"Single State Model","title":"Solving an operation with StorageSystemSimulations","text":"","category":"section"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"Originally Contributed by: Jose Daniel Lara","category":"page"},{"location":"tutorials/single_stage_model/#Introduction","page":"Single State Model","title":"Introduction","text":"","category":"section"},{"location":"tutorials/single_stage_model/#Load-Packages","page":"Single State Model","title":"Load Packages","text":"","category":"section"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"using PowerSystems\nusing PowerSimulations\nusing StorageSystemsSimulations\nusing PowerSystemCaseBuilder\nusing HiGHS # solver","category":"page"},{"location":"tutorials/single_stage_model/#Data","page":"Single State Model","title":"Data","text":"","category":"section"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"note: Note\nPowerSystemCaseBuilder.jl is a helper library that makes it easier to reproduce examples in the documentation and tutorials. Normally you would pass your local files to create the system data instead of calling the function build_system. For more details visit PowerSystemCaseBuilder.jl","category":"page"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"c_sys5_bat = build_system(\n    PSITestSystems,\n    \"c_sys5_bat_ems\";\n    add_single_time_series=true,\n    add_reserves=true,\n)\norcd = get_component(ReserveDemandCurve, c_sys5_bat, \"ORDC1\")\nset_available!(orcd, false)","category":"page"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"batt = get_component(EnergyReservoirStorage, c_sys5_bat, \"Bat2\")\n\noperation_cost = get_operation_cost(batt)","category":"page"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"template_uc = ProblemTemplate(PTDFPowerModel)\nset_device_model!(template_uc, ThermalStandard, ThermalStandardUnitCommitment)\nset_device_model!(template_uc, RenewableDispatch, RenewableFullDispatch)\nset_device_model!(template_uc, PowerLoad, StaticPowerLoad)\nset_device_model!(template_uc, Line, StaticBranch)","category":"page"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"storage_model = DeviceModel(\n    EnergyReservoirStorage,\n    StorageDispatchWithReserves;\n    attributes=Dict(\n        \"reservation\" => true,\n        \"energy_target\" => false,\n        \"cycling_limits\" => false,\n        \"regularization\" => true,\n    ),\n)\nset_device_model!(template_uc, storage_model)","category":"page"},{"location":"tutorials/single_stage_model/","page":"Single State Model","title":"Single State Model","text":"set_service_model!(template_uc, ServiceModel(VariableReserve{ReserveUp}, RangeReserve))\nset_service_model!(template_uc, ServiceModel(VariableReserve{ReserveDown}, RangeReserve))","category":"page"},{"location":"reference/developer_guidelines/#Guidelines-for-Developers","page":"Developer Guidelines","title":"Guidelines for Developers","text":"","category":"section"},{"location":"reference/developer_guidelines/","page":"Developer Guidelines","title":"Developer Guidelines","text":"In order to contribute to StorageSystemsSimulations.jl repository please read the following sections of InfrastructureSystems.jl documentation in detail:","category":"page"},{"location":"reference/developer_guidelines/","page":"Developer Guidelines","title":"Developer Guidelines","text":"Style Guide\nContributing Guidelines","category":"page"},{"location":"reference/developer_guidelines/","page":"Developer Guidelines","title":"Developer Guidelines","text":"Pull requests are always welcome to fix bugs or add additional modeling capabilities.","category":"page"},{"location":"reference/developer_guidelines/","page":"Developer Guidelines","title":"Developer Guidelines","text":"All the code contributions need to include tests with a minimum coverage of 70%","category":"page"},{"location":"#StorageSystemsSimulations.jl","page":"Welcome Page","title":"StorageSystemsSimulations.jl","text":"","category":"section"},{"location":"#Overview","page":"Welcome Page","title":"Overview","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"StorageSystemsSimulations.jl is a PowerSimulations.jl extension to support formulations and models related to energy storage.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Operational Storage Models can have multiple combinations of different restrictions. To manage these variations, StorageSystemsSimulations.jl relies on the PowerSimulations.DeviceModel attributes feature. Formulations can have varying implementations for different attributes defined in PowerSimulations.DeviceModel.","category":"page"},{"location":"#About-Sienna","page":"Welcome Page","title":"About Sienna","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"StorageSystemsSimulations.jl is part of the National Renewable Energy Laboratory's Sienna ecosystem, an open source framework for power system modeling, simulation, and optimization. The Sienna ecosystem can be found on Github. It contains three applications:","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Sienna\\Data enables efficient data input, analysis, and transformation\nSienna\\Ops enables enables system scheduling simulations by formulating and solving optimization problems\nSienna\\Dyn enables system transient analysis including small signal stability and full system dynamic simulations","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Each application uses multiple packages in the Julia programming language. StorageSystemsSimulations.jl is part of Sienna\\Ops.","category":"page"},{"location":"#Installation-and-Quick-Links","page":"Welcome Page","title":"Installation and Quick Links","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Sienna installation page: Instructions to install StorageSystemsSimulations.jl and other Sienna\\Ops packages\nSienna Documentation Hub: Links to other Sienna packages' documentation","category":"page"},{"location":"reference/StorageDispatchWithReserves/#StorageDispatchWithReserves-Formulation","page":"Storage Dispatch with Reserves","title":"StorageDispatchWithReserves Formulation","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/#StorageSystemsSimulations.StorageDispatchWithReserves-reference-StorageDispatchWithReserves","page":"Storage Dispatch with Reserves","title":"StorageSystemsSimulations.StorageDispatchWithReserves","text":"Formulation type to add storage formulation than can provide ancillary services. If a storage unit does not contribute to any service, then the variables and constraints related to services are ignored.\n\nThe formulation supports the following attributes. See Documentation for more details.\n\nDeviceModel(\n    StorageType, # E.g. EnergyReservoirStorage or GenericStorage\n    StorageDispatchWithReserves;\n    attributes=Dict(\n        \"reservation\" => true,\n        \"cycling_limits\" => false,\n        \"energy_target\" => false,\n        \"complete_coverage\" => false,\n        \"regularization\" => true,\n    ),\n    use_slacks=false,\n)\n\n\n\n\n\n","category":"type"},{"location":"reference/StorageDispatchWithReserves/#Attributes","page":"Storage Dispatch with Reserves","title":"Attributes","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"\"reservation\": Forces the storage to operate exclusively on charge or discharge mode through the entire operation interval. We recommend setting this to false for models with relatively longer time resolutions (e.g., 1-Hr) since the storage can take simultaneous charge or discharge positions on average over the period.\n\"cycling_limits\": This limits the storage's energy cycling. A single charging (discharging) cycle is fully charging (discharging) the storage once. The calculation uses the total energy charge/discharge and the number of cycles. Currently, the formulation only supports a fixed value per operation period. Additional variables for StorageChargeCyclingSlackVariable and StorageDischargeCyclingSlackVariable are included in the model if use_slacks is set to true.\n\"energy_target\": Set a target at the end of the model horizon for the storage's state of charge. Currently, the formulation only supports a fixed value per operation period. Additional variables for StorageEnergyShortageVariable and StorageEnergySurplusVariable are included in the model if use_slacks is set to true.","category":"page"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"warning: Warning\nCombining cycle limits and energy target attributes is not recommended. Both attributes impose constraints on energy. There is no guarantee that the constraints can be satisfied simultaneously.","category":"page"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"\"complete_coverage\": This attribute implements constraints that require the battery to cover the sum of all the ancillary services it participates in simultaneously. It is equivalent to holding energy in case all the services get deployed simultaneously. This constraint is added to the constraints that cover each service independently and corresponds to a more conservative operation regime.\n\"regularization\": This attribute smooths the charge/discharge profiles to avoid bang-bang solutions via a penalty on the absolute value of the intra-temporal variations of the charge and discharge power. Solving for optimal storage dispatch can stall in models with large amounts of curtailment or long periods with negative or zero prices due to numerical degeneracy. The regularization term is scaled by the storage device's power limits to normalize the term and avoid additional penalties to larger storage units.","category":"page"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"danger: Danger\nSetting the energy target attribute in combination with EnergyTargetFeedforward or EnergyLimitFeedforward is not permitted and StorageSystemsSimulations.jl will throw an exception.","category":"page"},{"location":"reference/StorageDispatchWithReserves/#Mathematical-Model","page":"Storage Dispatch with Reserves","title":"Mathematical Model","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/#Sets","page":"Storage Dispatch with Reserves","title":"Sets","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"beginalign*\n    mathcalP^textas_textup  textUp Ancillary Service Products Set\n    mathcalP^textas_textdn  textDown Ancillary Service Products Set\n    mathcalP^textas = bigcupleft mathcalP^textas_textup mathcalP^textas_textdnright  textAncillary Service Products Set\n    mathcalT = 1dotsT  textTime steps \nendalign*","category":"page"},{"location":"reference/StorageDispatchWithReserves/#Parameters","page":"Storage Dispatch with Reserves","title":"Parameters","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/#Operational-Parameters","page":"Storage Dispatch with Reserves","title":"Operational Parameters","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"beginalign*\n    P^maxch_st textMax Charge Power Storage MW\n    P^maxds_st textMax Discharge Power Storage MW\n    eta^ch_st textCharge Efficiency Storage hr\n    eta^ds_st textDischarge Efficiency Storage hr\n    R^*_p t textAncillary Service deployment Forecast at time t for service p in mathcalP^textas MW\n    E^max_st textMax Energy Storage Capacity MWh\n    E^st_0 textStorage initial energy MWh\n    E^st_T textStorage Energy Target at the end of the horizon ie time-step T MWh\n    Delta t  textTimestep length\n    C_st  textMaximum number of cycles over the horizon \n     textFor DA the value is fixed to 3 and in RT the value depends on the DA allocation of cycles \n    N_p  textNumber of periods of compliance to supply an AS\n     textFor example Spinning reserve has 12 for 1 hour of compliance when Delta_t is 5-minutes\nendalign*","category":"page"},{"location":"reference/StorageDispatchWithReserves/#Cost-Parameters","page":"Storage Dispatch with Reserves","title":"Cost Parameters","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"beginalign*\n    textVOM textStorage Variable Operation and Maintenance Cost MWh\n    rho^e+ textStorage Surplus penalty at end of target cost MWh Used when textttuse_slacks = true\n    rho^e- textStorage Shortage penalty at end of target cost MWh Used when textttuse_slacks = true\n    rho^c textStorage Cycling Penalty MWh Used when textttuse_slacks = true\n    rho^z textRegularization Terms Penalty Used when textttregularization = true\nendalign*","category":"page"},{"location":"reference/StorageDispatchWithReserves/#Variables","page":"Storage Dispatch with Reserves","title":"Variables","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"beginalign*\n    p^st ch_t   in 0 P^maxch_st quadtextExpected Storage charging power\n    p^st ds_t   in 0 P^maxds_st quadtextExpected Storage discharging power\n    e^st_t   in 0 E^max_st quad textExpected Storage Energy\n    textss^st_t   in  0 1  quad textChargeDischarge status Storage Used when textttreservation = true\n    sb_stcpt  in 0 P^maxch_st  quad textAncillary service fraction assigned to Storage Charging\n    sb_stdpt  in 0 P^maxds_st  quad textAncillary service fraction assigned to Storage Discharging\n    e^st+   in 0 E^max_st quad textStorage Energy Surplus above target Used when textttuse_slacks = true\n    e^st-   in 0 E^max_st quad textStorage Energy Shortage below target Used when textttuse_slacks = true\n    c^ch-   in 0 T C_st quad textCharging Cycling Shortage Used when textttuse_slacks = true\n    c^ds-   in 0 T C_st quad textDischarging Cycling Shortage Used when textttuse_slacks = true\n    z^st ch_t  in 0 P^maxch_st quad textRegularization charge variable Used when textttregularization = true\n    z^st ds_t  in 0 P^maxds_st quad textRegularization discharge variable Used when textttregularization = true\nendalign*","category":"page"},{"location":"reference/StorageDispatchWithReserves/#Model","page":"Storage Dispatch with Reserves","title":"Model","text":"","category":"section"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"beginalign*\nmin_substackboldsymbolp^st ch boldsymbolp^st ds boldsymbole^st  e^st+ e^st- c^ch- + c^ds-\n rho^e+ e^st+ + rho^e- e^st- + rho^c left(c^ch- + c^ds- right) + rho^z left(fracz^chP^maxch_st + fracz^dsP^maxds_st right)\n +Delta t sum_t in mathcalT textVOM_st left ( left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t right) + left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_tright) right) \nendalign*","category":"page"},{"location":"reference/StorageDispatchWithReserves/","page":"Storage Dispatch with Reserves","title":"Storage Dispatch with Reserves","text":"beginalign*\ntextst   \ntextPower Limit Constraints\np^st ch_t + sum_p in mathcalP^textas_textdn sb_stcpt leq (1 - textss^st_t)P^maxch_st  quad forall t in mathcalT \n p^st ch_t - sum_p in mathcalP^textas_textup sb_stcpt geq 0  quad forall t in mathcalT\n p^st ds_t + sum_p in mathcalP^textas_textup sb_stdpt leq textss^st_tP^maxds_st  forall t in mathcalT\n p^st ds_t - sum_p in mathcalP^textas_textdn sb_stdpt geq 0  forall t in mathcalT\ntextEnergy Storage Limit Constraints\ne^st_t leq E^max_st  forall t in mathcalT\n e^st_t geq E^min_st  forall t in mathcalT\ntextEnergy Bookkeeping Constraints\n E^st_0 + Delta t  left(sum_p in mathcalP^textas_textdn R^*_p1 sb_stcp1 + p^stch_1  - sum_p in mathcalP^textas_textup R^*_p1 sb_stcp1right)eta^ch_st\n-Delta tleft(sum_p in mathcalP^textas_textup R^*_p1 sb_stdp1 + p^stds_1 - sum_p in mathcalP^textas_textdn R^*_pt sb_stdp1right)frac1eta^ds_st=e^st_1\ne^st_t-1 + Delta t  left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t  - sum_p in mathcalP^textas_textup R^*_pt sb_stcptright)eta^ch_st\n-Delta tleft(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_t - sum_p in mathcalP^textas_textdn R^*_pt sb_stdptright)frac1eta^ds_st =e^st_t  forall t in mathcalT setminus 1\ntextEnd of period energy target constraint Used when textttenergy_target = true\ne^st_T + e^st+ - e^st- = E^st_T\ntextStorage Cycling Limits Constraints Used when textttcycling_limits = true\n sum_t in mathcalT left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_tright)frac1eta^ds_st Delta t - c^ds- leq C_st E^max_st \n sum_t in mathcalT left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t right)eta^ch_st Delta t - c^ch- leq C_st E^max_st \ntextSingle Ancillary Services Energy Coverage\n sb_stcpt  eta^ch_st N_p Delta t le E_st^max - e^st_t  forall p in mathcalP^as_dn  forall t in mathcalT\n sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t- E^min_st  forall p in mathcalP^as_up  forall t in mathcalT\n sb_stcp1  eta^ch_st N_p Delta t le E_st^max - e^st_0  forall p in mathcalP^as_dn\n sb_stcpt  eta^ch_st N_p Delta t le E_st^max - e^st_t-1  forall p in mathcalP^as_dn  forall t in mathcalT setminus 1\nsb_stdp1  frac1eta^ds_st N_p Delta t leq e^st_0 - E^min_st  forall p in mathcalP^as_up\n sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t-1 - E^min_st  forall p in mathcalP^as_up  forall t in mathcalT setminus 1 \ntextComplete Ancillary Services Energy Coverage Used when textttcomplete_coverage = true\n sum_p in mathcalP^textas_textdn  sb_stcpt  eta^ch_st N_p Delta t le E_st^max - e^st_t  forall t in mathcalT\n sum_p in mathcalP^textas_textup sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t- E^min_st  forall t in mathcalT\n sum_p in mathcalP^textas_textdn sb_stcp1  eta^ch_st N_p Delta t le E_st^max - e^st_0 \nsum_p in mathcalP^textas_textdn  sb_stcpt eta^ch_st N_p Delta t le E_st^max - e^st_t-1  forall t in mathcalT setminus 1\nsum_p in mathcalP^textas_textup sb_stdp1  frac1eta^ds_st N_p Delta t leq e^st_0- E^min_st  \n sum_p in mathcalP^textas_textup sb_stdpt  frac1eta^ds_st N_p Delta t leq e^st_t-1- E^min_st  forall t in mathcalT setminus 1\ntextRegularization Constraints Used when textttregularization = true\n left(sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stcpt-1 + p^stch_t-1  - sum_p in mathcalP^textas_textup R^*_pt-1 sb_stcpt-1right) \n - left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t  - sum_p in mathcalP^textas_textup R^*_pt sb_stcptright) le z^st ch_t  forall t in mathcalT setminus 1\n left(sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stcpt-1 + p^stch_t-1  - sum_p in mathcalP^textas_textup R^*_pt-1 sb_stcpt-1right) \n - left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t  - sum_p in mathcalP^textas_textup R^*_pt sb_stcptright) ge -z^st ch_t  forall t in mathcalT setminus 1\nleft(sum_p in mathcalP^textas_textup R^*_pt-1 sb_stdpt-1 + p^stds_t-1 - sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stdpt-1right) \n-left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt-1 + p^stds_t - sum_p in mathcalP^textas_textdn R^*_pt sb_stdptright) le z^st ds_t   forall t in mathcalT setminus 1\nleft(sum_p in mathcalP^textas_textup R^*_pt-1 sb_stdpt-1 + p^stds_t-1 - sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stdpt-1right) \n-left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_t - sum_p in mathcalP^textas_textdn R^*_pt sb_stdptright) ge -z^st ds_t   forall t in mathcalT setminus 1\nendalign*","category":"page"},{"location":"reference/internal/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"reference/internal/#StorageSystemsSimulations.StateofChargeTargetConstraint","page":"Internals","title":"StorageSystemsSimulations.StateofChargeTargetConstraint","text":"Struct to create the state of charge target constraint at the end of period. Used when the attribute energy_target = true.\n\nThe specified constraint is formulated as:\n\ne^st_T + e^st+ - e^st- = E^st_T\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#StorageSystemsSimulations.StorageRegularizationConstraintCharge","page":"Internals","title":"StorageSystemsSimulations.StorageRegularizationConstraintCharge","text":"Struct to specify the auxiliary constraints for regularization terms in the objective function for the charge variable. Used when the attribute regularization = true.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n left(sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stcpt-1 + p^stch_t-1  - sum_p in mathcalP^textas_textup R^*_pt-1 sb_stcpt-1right) - left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t  - sum_p in mathcalP^textas_textup R^*_pt sb_stcptright) le z^st ch_t forall t in 2dots T\n left(sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stcpt-1 + p^stch_t-1  - sum_p in mathcalP^textas_textup R^*_pt-1 sb_stcpt-1right) - left(sum_p in mathcalP^textas_textdn R^*_pt sb_stcpt + p^stch_t  - sum_p in mathcalP^textas_textup R^*_pt sb_stcptright) ge -z^st ch_t forall t in 2dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#StorageSystemsSimulations.StorageRegularizationConstraintDischarge","page":"Internals","title":"StorageSystemsSimulations.StorageRegularizationConstraintDischarge","text":"Struct to specify the auxiliary constraints for regularization terms in the objective function for the discharge variable. Used when the attribute regularization = true.\n\nThe specified constraints are formulated as:\n\nbeginalign*\n left(sum_p in mathcalP^textas_textup R^*_pt-1 sb_stdpt-1 + p^stds_t-1 - sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stdpt-1right) -left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_t - sum_p in mathcalP^textas_\textdn R^*_pt sb_stdptright) le z^st ds_t forall t in 2dots T\n left(sum_p in mathcalP^textas_textup R^*_pt-1 sb_stdpt-1 + p^stds_t-1 - sum_p in mathcalP^textas_textdn R^*_pt-1 sb_stdpt-1right) -left(sum_p in mathcalP^textas_textup R^*_pt sb_stdpt + p^stds_t - sum_p in mathcalP^textas_\textdn R^*_pt sb_stdptright) ge -z^st ds_t forall t in 2dots T\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#StorageSystemsSimulations.StorageRegularizationVariable","page":"Internals","title":"StorageSystemsSimulations.StorageRegularizationVariable","text":"Abstract used for StorageRegularization variables\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#PowerSimulations.add_constraints!-Union{Tuple{X}, Tuple{V}, Tuple{PowerSimulations.OptimizationContainer, Type{PowerSimulations.EnergyBalanceConstraint}, InfrastructureSystems.FlattenIteratorWrapper{V}, PowerSimulations.DeviceModel{V, StorageDispatchWithReserves}, PowerSimulations.NetworkModel{X}}} where {V<:Storage, X<:PowerModels.AbstractPowerModel}","page":"Internals","title":"PowerSimulations.add_constraints!","text":"add_constraints!(\n    container::PowerSimulations.OptimizationContainer,\n    _::Type{PowerSimulations.EnergyBalanceConstraint},\n    devices::InfrastructureSystems.FlattenIteratorWrapper{V<:Storage},\n    model::PowerSimulations.DeviceModel{V<:Storage, StorageDispatchWithReserves},\n    network_model::PowerSimulations.NetworkModel{X<:PowerModels.AbstractPowerModel}\n)\n\n\nAdd Energy Balance Constraints for AbstractStorageFormulation\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#PowerSimulations.add_constraints!-Union{Tuple{X}, Tuple{V}, Tuple{PowerSimulations.OptimizationContainer, Type{ReserveDischargeConstraint}, InfrastructureSystems.FlattenIteratorWrapper{V}, PowerSimulations.DeviceModel{V, StorageDispatchWithReserves}, PowerSimulations.NetworkModel{X}}} where {V<:Storage, X<:PowerModels.AbstractPowerModel}","page":"Internals","title":"PowerSimulations.add_constraints!","text":"add_constraints!(\n    container::PowerSimulations.OptimizationContainer,\n    _::Type{ReserveDischargeConstraint},\n    devices::InfrastructureSystems.FlattenIteratorWrapper{V<:Storage},\n    model::PowerSimulations.DeviceModel{V<:Storage, StorageDispatchWithReserves},\n    network_model::PowerSimulations.NetworkModel{X<:PowerModels.AbstractPowerModel}\n)\n\n\nAdd Energy Balance Constraints for AbstractStorageFormulation\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#PowerSimulations.add_feedforward_constraints!-Union{Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.DeviceModel, InfrastructureSystems.FlattenIteratorWrapper{T}, EnergyLimitFeedforward}} where T<:Component","page":"Internals","title":"PowerSimulations.add_feedforward_constraints!","text":"add_feedforward_constraints!(\n    container::PowerSimulations.OptimizationContainer,\n    _::PowerSimulations.DeviceModel,\n    devices::InfrastructureSystems.FlattenIteratorWrapper{T<:Component},\n    ff::EnergyLimitFeedforward\n)\n\n\n    add_feedforward_constraints(container::OptimizationContainer,\n                    cons_name::Symbol,\n                    param_reference,\n                    var_key::VariableKey)\n\nConstructs a parameterized integral limit constraint to implement feedforward from other models. The Parameters are initialized using the upper boundary values of the provided variables.\n\nsum(variable[var_name, t] for t in 1:affected_periods)/affected_periods <= param_reference[var_name]\n\nLaTeX\n\nsum_t x leq param^max\n\nArguments\n\ncontainer::OptimizationContainer : the optimization_container model built in PowerSimulations\nmodel::DeviceModel : the device model\ndevices::IS.FlattenIteratorWrapper{T} : list of devices\nff::FixValueFeedforward : a instance of the FixValue Feedforward\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#PowerSimulations.add_feedforward_constraints!-Union{Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.DeviceModel{T, U}, InfrastructureSystems.FlattenIteratorWrapper{T}, EnergyTargetFeedforward}} where {T<:Storage, U<:StorageSystemsSimulations.AbstractStorageFormulation}","page":"Internals","title":"PowerSimulations.add_feedforward_constraints!","text":"add_feedforward_constraints!(\n    container::PowerSimulations.OptimizationContainer,\n    _::PowerSimulations.DeviceModel{T<:Storage, U<:StorageSystemsSimulations.AbstractStorageFormulation},\n    devices::InfrastructureSystems.FlattenIteratorWrapper{T<:Storage},\n    ff::EnergyTargetFeedforward\n)\n\n\n    add_feedforward_constraints(\n        container::OptimizationContainer,\n        ::DeviceModel,\n        devices::IS.FlattenIteratorWrapper{T},\n        ff::EnergyTargetFeedforward,\n    ) where {T <: PSY.Component}\n\nConstructs a equality constraint to a fix a variable in one model using the variable value from other model results.\n\nvariable[var_name, t] + slack[var_name, t] >= param[var_name, t]\n\nLaTeX\n\nx + slack = param\n\nArguments\n\ncontainer::OptimizationContainer : the optimization_container model built in PowerSimulations\nmodel::DeviceModel : the device model\ndevices::IS.FlattenIteratorWrapper{T} : list of devices\nff::EnergyTargetFeedforward : a instance of the EnergyTarget Feedforward\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#PowerSimulations.get_min_max_limits-Tuple{Storage, Type{StateofChargeLimitsConstraint}, Type{<:StorageSystemsSimulations.AbstractStorageFormulation}}","page":"Internals","title":"PowerSimulations.get_min_max_limits","text":"get_min_max_limits(\n    d::Storage,\n    _::Type{StateofChargeLimitsConstraint},\n    _::Type{<:StorageSystemsSimulations.AbstractStorageFormulation}\n) -> NamedTuple{(:min, :max), <:Tuple{Any, Any}}\n\n\nMin and max limits for Energy Capacity Constraint and AbstractStorageFormulation\n\n\n\n\n\n","category":"method"}]
}
